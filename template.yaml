AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Benchmarking AppSync Events with Momento Topics

Parameters:
  MomentoApiKey:
    Type: String
  WebSocketApiKey:
    Type: String

Metadata:
  esbuild-properties: &esbuild-properties
    Format: esm
    Minify: true
    OutExtension:
      - .js=.mjs
    Target: es2020
    Sourcemap: false
    EntryPoints:
      - index.mjs
    Banner:
      - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);
    External:
      - "@aws-sdk/*"

Globals:
  Function:
    Runtime: nodejs20.x
    CodeUri: functions
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  EventsApi:
    Type: AWS::AppSync::Api
    Properties:
      Name: BenchmarkApi
      EventConfig:
        AuthProviders:
          - AuthType: API_KEY
        ConnectionAuthModes:
          - AuthType: API_KEY
        DefaultPublishAuthModes:
          - AuthType: API_KEY
        DefaultSubscribeAuthModes:
          - AuthType: API_KEY

  PublishFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - send-message.mjs
    Properties:
      Handler: send-message.handler
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          MOMENTO_API_KEY: !Ref MomentoApiKey
          WS_API_KEY: !Ref WebSocketApiKey
      FunctionUrlConfig:
        AuthType: NONE

  RecordMetricsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        <<: *esbuild-properties
        EntryPoints:
          - record-metrics.mjs
    Properties:
      Handler: record-metrics.handler
      Policies:
        - AWSLambdaBasicExecutionRole
      FunctionUrlConfig:
        AuthType: NONE

  EmojiNamespace:
    Type: AWS::AppSync::ChannelNamespace
    Properties:
      ApiId: !GetAtt EventsApi.ApiId
      Name: emoji

  DevApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt EventsApi.ApiId

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WebSocketBenchmarkVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WebSocketBenchmarkVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  WebSocketBenchmarkService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref WebSocketBenchmarkCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref WebSocketBenchmarkTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup

  WebSocketBenchmarkECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: realtime

  WebSocketBenchmarkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WebSocketBenchmarkVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebSocketBenchmarkVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WebSocketBenchmarkVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: Name
          Value: PublicSubnet2

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref WebSocketBenchmarkVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  WebSocketBenchmarkCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WebSocketBenchmarkCluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebSocketBenchmarkTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowECRandCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: "*"

  WebSocketBenchmarkTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: WebSocketBenchmarkTask
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: realtime-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/realtime:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: MOMENTO_API_KEY
              Value: !Ref MomentoApiKey
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: /ecs/websocket-benchmark
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: realtime

  WebSocketBenchmarkLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/websocket-benchmark
      RetentionInDays: 14

Outputs:
  EventsApiHost:
    Description: Host name of the Events API
    Value: !GetAtt EventsApi.Dns.Http
  EventsApiWebSocket:
    Description: WebSocket URL of the Events API
    Value: !Sub wss://${EventsApi.Dns.Realtime}/event/realtime
  EventsApiKey:
    Description: API key for the Events API
    Value: !GetAtt DevApiKey.ApiKey
  PublishUrl:
    Description: URL to send messages to the Events API
    Value: !GetAtt PublishFunctionUrl.FunctionUrl
